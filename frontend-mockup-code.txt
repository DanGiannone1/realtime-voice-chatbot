================================================================================
FILE: app/page.tsx
================================================================================

"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Wrench } from 'lucide-react'
import { useVoiceActivity } from "@/hooks/use-voice-activity"

type ActivityEvent = {
  timestamp: number
  type: "user" | "ai" | "tool" | "silence"
  duration?: number
}

type TimeRange = "1m" | "3m" | "5m"

export default function VoiceActivityPage() {
  const { activities: wsActivities, isConnected, currentSpeaker } = useVoiceActivity()
  const [activities, setActivities] = useState<ActivityEvent[]>([])
  const [timeRange, setTimeRange] = useState<TimeRange>("1m")
  const [currentTime, setCurrentTime] = useState(0)
  const [totalTime, setTotalTime] = useState(0)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)
  const [toolCallPositions, setToolCallPositions] = useState<{ x: number; timestamp: number }[]>([])
  const animationRef = useRef<number>()

  useEffect(() => {
    if (isConnected && wsActivities.length > 0) {
      setActivities(wsActivities)
    }
  }, [wsActivities, isConnected])

  useEffect(() => {
    if (isConnected) return

    let currentSpeaker: "user" | "ai" | "silence" = "silence"
    let speakerStartTime = Date.now()
    let speakerDuration = 0

    const interval = setInterval(() => {
      setCurrentTime((prev) => prev + 0.1)

      const now = Date.now()
      const elapsed = now - speakerStartTime

      if (elapsed >= speakerDuration) {
        if (currentSpeaker === "ai" && Math.random() > 0.6) {
          setActivities((prev) => [
            ...prev.slice(-1000),
            {
              timestamp: now,
              type: "tool",
            },
          ])
        }

        const rand = Math.random()
        if (currentSpeaker === "silence") {
          currentSpeaker = rand > 0.5 ? "user" : "ai"
          speakerDuration = 3000 + Math.random() * 2000
        } else if (currentSpeaker === "user") {
          currentSpeaker = "silence"
          speakerDuration = 500 + Math.random() * 500
        } else {
          currentSpeaker = "silence"
          speakerDuration = 500 + Math.random() * 500
        }

        speakerStartTime = now
      }

      setActivities((prev) => [
        ...prev.slice(-1000),
        {
          timestamp: now,
          type: currentSpeaker,
        },
      ])
    }, 100)

    return () => clearInterval(interval)
  }, [isConnected])

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const draw = () => {
      const ctx = canvas.getContext("2d")
      if (!ctx) return

      const dpr = window.devicePixelRatio || 1
      const rect = canvas.getBoundingClientRect()
      canvas.width = rect.width * dpr
      canvas.height = rect.height * dpr
      ctx.scale(dpr, dpr)

      const width = rect.width
      const height = rect.height
      const centerY = height / 2
      const padding = 40

      ctx.clearRect(0, 0, width, height)

      ctx.strokeStyle = "rgba(255, 255, 255, 0.03)"
      ctx.lineWidth = 1
      for (let i = 0; i <= 4; i++) {
        const y = (height / 4) * i
        ctx.beginPath()
        ctx.moveTo(padding, y)
        ctx.lineTo(width - padding, y)
        ctx.stroke()
      }

      ctx.strokeStyle = "rgba(255, 255, 255, 0.1)"
      ctx.lineWidth = 1
      ctx.beginPath()
      ctx.moveTo(padding, centerY)
      ctx.lineTo(width - padding, centerY)
      ctx.stroke()

      const rangeMs = timeRange === "1m" ? 60000 : timeRange === "3m" ? 180000 : 300000
      const now = Date.now()
      const startTime = now - rangeMs

      ctx.fillStyle = "rgba(255, 255, 255, 0.4)"
      ctx.font = "11px sans-serif"
      ctx.textAlign = "center"

      const timeLabels = [
        { label: `${timeRange === "1m" ? "60" : timeRange === "3m" ? "180" : "300"}s`, pos: 0 },
        { label: `${Math.floor((timeRange === "1m" ? 60 : timeRange === "3m" ? 180 : 300) * 0.75)}s`, pos: 0.25 },
        { label: `${Math.floor((timeRange === "1m" ? 60 : timeRange === "3m" ? 180 : 300) * 0.5)}s`, pos: 0.5 },
        { label: `${Math.floor((timeRange === "1m" ? 60 : timeRange === "3m" ? 180 : 300) * 0.25)}s`, pos: 0.75 },
        { label: "now", pos: 1 },
      ]

      timeLabels.forEach(({ label, pos }) => {
        const x = padding + (width - padding * 2) * pos
        ctx.fillText(label, x, height - 10)
      })

      const recentActivities = activities.filter((a) => a.timestamp >= startTime)
      const drawWidth = width - padding * 2
      const pixelsPerMs = drawWidth / rangeMs

      const segments: { start: number; end: number; type: "user" | "ai" | "silence" }[] = []
      let currentSegment: { start: number; end: number; type: "user" | "ai" | "silence" } | null = null

      recentActivities.forEach((activity) => {
        if (activity.type === "tool") return

        if (!currentSegment || currentSegment.type !== activity.type) {
          if (currentSegment) {
            segments.push(currentSegment)
          }
          currentSegment = {
            start: activity.timestamp,
            end: activity.timestamp,
            type: activity.type,
          }
        } else {
          currentSegment.end = activity.timestamp
        }
      })

      if (currentSegment) {
        segments.push(currentSegment)
      }

      segments.forEach((segment) => {
        if (segment.type === "silence") return

        const startX = padding + drawWidth - (now - segment.start) * pixelsPerMs
        const endX = padding + drawWidth - (now - segment.end) * pixelsPerMs
        const segmentWidth = endX - startX

        if (segmentWidth < 1) return

        const color = segment.type === "ai" ? "#10b981" : "#6b7280"
        const glowColor = segment.type === "ai" ? "rgba(16, 185, 129, 0.3)" : "rgba(107, 114, 128, 0.3)"

        const isActive = now - segment.end < 500

        const barCount = Math.max(Math.floor(segmentWidth / 3), 10)
        const barWidth = 2
        const barGap = 1

        for (let i = 0; i < barCount; i++) {
          const x = startX + (segmentWidth / barCount) * i
          const t = i / barCount

          const timeComponent = isActive ? Date.now() * 0.003 : 0
          const amplitude =
            Math.sin(t * 20 + timeComponent) * 0.3 +
            Math.sin(t * 40 + timeComponent * 1.5) * 0.2 +
            Math.sin(t * 60 + timeComponent * 2) * 0.15 +
            0.35

          const barHeight = Math.max(amplitude * (height * 0.35), 4)

          ctx.shadowBlur = 8
          ctx.shadowColor = glowColor
          ctx.fillStyle = color
          ctx.fillRect(x, centerY - barHeight / 2, barWidth, barHeight)
        }

        ctx.shadowBlur = 0
      })

      const toolCalls = activities.filter((a) => a.type === "tool" && a.timestamp >= startTime)
      const positions = toolCalls.map((tool) => {
        const x = padding + drawWidth - (now - tool.timestamp) * pixelsPerMs
        return { x, timestamp: tool.timestamp }
      })
      setToolCallPositions(positions)

      animationRef.current = requestAnimationFrame(draw)
    }

    draw()

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
    }
  }, [activities, timeRange])

  useEffect(() => {
    setTotalTime(currentTime)
  }, [currentTime])

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = Math.floor(seconds % 60)
    return `${mins}:${secs.toString().padStart(2, "0")}`
  }

  return (
    <div className="min-h-screen bg-[#0a0a0a] text-white p-6">
      <div className="max-w-6xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <div className="w-3 h-3 bg-white rounded-sm" />
            </div>
            <h1 className="text-xl font-semibold text-blue-400">Live Activity Pulse</h1>
            <div className="flex items-center gap-2 text-xs">
              <div className={`w-2 h-2 rounded-full ${isConnected ? "bg-green-500" : "bg-gray-500"}`} />
              <span className="text-gray-400">{isConnected ? "Connected" : "Simulated"}</span>
            </div>
          </div>

          <div className="flex gap-2">
            {(["1m", "3m", "5m"] as TimeRange[]).map((range) => (
              <Button
                key={range}
                variant={timeRange === range ? "default" : "ghost"}
                size="sm"
                onClick={() => setTimeRange(range)}
                className={timeRange === range ? "bg-blue-600 hover:bg-blue-700" : "text-gray-400 hover:text-white"}
              >
                {range}
              </Button>
            ))}
          </div>
        </div>

        <Card className="bg-[#111111] border-gray-800 p-6 relative overflow-hidden">
          <div ref={containerRef} className="relative">
            <canvas ref={canvasRef} className="w-full h-[200px]" />
            {toolCallPositions.map((pos, i) => (
              <div
                key={i}
                className="absolute pointer-events-none top-12"
                style={{
                  left: `${pos.x}px`,
                  transform: "translateX(-50%)",
                }}
              >
                <Wrench className="w-5 h-5 text-amber-500 drop-shadow-[0_0_8px_rgba(245,158,11,0.6)]" />
              </div>
            ))}
          </div>

          <div className="mt-4 flex items-center justify-between text-sm">
            <span className="text-gray-400">
              {formatTime(currentTime)} / {formatTime(totalTime)}
            </span>
            <div className="flex items-center gap-4 text-xs text-gray-500">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-gray-600 rounded" />
                <span>You</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-emerald-500 rounded" />
                <span>AI</span>
              </div>
              <div className="flex items-center gap-2">
                <Wrench className="w-3 h-3 text-amber-500" />
                <span>Tool Call</span>
              </div>
            </div>
          </div>
        </Card>

        <div className="mt-6 text-center text-sm text-gray-500">
          {isConnected ? (
            <>
              <p className="text-green-400">Connected to Python backend</p>
              <p className="mt-1">Showing real-time voice activity</p>
            </>
          ) : (
            <>
              <p>Start your Python backend with WebSocket server on ws://localhost:8765</p>
              <p className="mt-1">Currently showing simulated data for testing</p>
            </>
          )}
          <p className="mt-2">Green waveform = AI speaking • Gray waveform = You speaking • Amber icons = Tool calls</p>
        </div>
      </div>
    </div>
  )
}


================================================================================
FILE: app/layout.tsx
================================================================================

import type { Metadata } from 'next'
import { Geist, Geist_Mono } from 'next/font/google'
import { Analytics } from '@vercel/analytics/next'
import './globals.css'

const _geist = Geist({ subsets: ["latin"] });
const _geistMono = Geist_Mono({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: 'v0 App',
  description: 'Created with v0',
  generator: 'v0.app',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en">
      <body className={`font-sans antialiased`}>
        {children}
        <Analytics />
      </body>
    </html>
  )
}


================================================================================
FILE: app/globals.css
================================================================================

@import 'tailwindcss';
@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --font-sans: 'Geist', 'Geist Fallback';
  --font-mono: 'Geist Mono', 'Geist Mono Fallback';
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================================================
FILE: hooks/use-voice-activity.ts
================================================================================

"use client"

import { useEffect, useRef, useState } from "react"

export type Speaker = "user" | "ai" | "silence"

export interface ActivityEvent {
  type: "user" | "ai" | "tool"
  timestamp: number
  duration?: number
}

export function useVoiceActivity(wsUrl = "ws://localhost:8765") {
  const [activities, setActivities] = useState<ActivityEvent[]>([])
  const [isConnected, setIsConnected] = useState(false)
  const [currentSpeaker, setCurrentSpeaker] = useState<Speaker>("silence")
  const wsRef = useRef<WebSocket | null>(null)
  const currentEventRef = useRef<ActivityEvent | null>(null)
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>()

  useEffect(() => {
    const connect = () => {
      try {
        const ws = new WebSocket(wsUrl)
        wsRef.current = ws

        ws.onopen = () => {
          console.log("[v0] WebSocket connected to Python backend")
          setIsConnected(true)
        }

        ws.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data)

            if (message.type === "state_change") {
              const { speaker, timestamp } = message.data

              // Close previous event if exists
              if (currentEventRef.current && currentEventRef.current.type !== "tool") {
                const duration = timestamp - currentEventRef.current.timestamp
                const completedEvent = {
                  ...currentEventRef.current,
                  duration,
                }

                setActivities((prev) => [...prev.slice(-1000), completedEvent])
                currentEventRef.current = null
              }

              // Start new event if not silence
              if (speaker !== "silence") {
                currentEventRef.current = {
                  type: speaker as "user" | "ai",
                  timestamp: timestamp * 1000, // Convert to ms
                }
              }

              setCurrentSpeaker(speaker)
            } else if (message.type === "tool_call") {
              const { timestamp } = message.data

              // Add tool call event
              const toolEvent: ActivityEvent = {
                type: "tool",
                timestamp: timestamp * 1000, // Convert to ms
                duration: 0,
              }

              setActivities((prev) => [...prev.slice(-1000), toolEvent])
            }
          } catch (error) {
            console.error("[v0] Error parsing WebSocket message:", error)
          }
        }

        ws.onerror = (error) => {
          console.error("[v0] WebSocket error:", error)
          setIsConnected(false)
        }

        ws.onclose = () => {
          console.log("[v0] WebSocket disconnected, will retry in 3s...")
          setIsConnected(false)

          // Attempt to reconnect after 3 seconds
          reconnectTimeoutRef.current = setTimeout(() => {
            console.log("[v0] Attempting to reconnect...")
            connect()
          }, 3000)
        }
      } catch (error) {
        console.error("[v0] Failed to connect to WebSocket:", error)
        setIsConnected(false)

        // Retry connection
        reconnectTimeoutRef.current = setTimeout(() => {
          connect()
        }, 3000)
      }
    }

    connect()

    // Cleanup
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current)
      }
      if (wsRef.current) {
        wsRef.current.close()
      }
    }
  }, [wsUrl])

  return {
    activities,
    isConnected,
    currentSpeaker,
  }
}


================================================================================
FILE: app/api/activity/route.ts
================================================================================

import { NextResponse } from "next/server"

// This endpoint will receive activity updates from your Python backend
export async function POST(request: Request) {
  try {
    const data = await request.json()

    // Process activity data from Python backend
    // data should include: { type: 'user' | 'ai', is_speaking: boolean, timestamp: number }

    return NextResponse.json({ success: true })
  } catch (error) {
    return NextResponse.json({ error: "Failed to process activity" }, { status: 500 })
  }
}

// Get current activity state
export async function GET() {
  // Return current activity state
  // You can store this in a database or in-memory store
  return NextResponse.json({
    activities: [],
    currentState: { user: false, ai: false },
  })
}


================================================================================
FILE: lib/activity-store.ts
================================================================================

// Simple in-memory store for activity events
// In production, use a database or Redis

type ActivityEvent = {
  timestamp: number
  type: "user" | "ai"
  is_speaking: boolean
  duration?: number
}

class ActivityStore {
  private events: ActivityEvent[] = []
  private maxEvents = 1000

  addEvent(event: ActivityEvent) {
    this.events.push(event)

    // Keep only recent events
    if (this.events.length > this.maxEvents) {
      this.events = this.events.slice(-this.maxEvents)
    }
  }

  getEvents(since?: number): ActivityEvent[] {
    if (since) {
      return this.events.filter((e) => e.timestamp >= since)
    }
    return this.events
  }

  clear() {
    this.events = []
  }
}

export const activityStore = new ActivityStore()


================================================================================
END OF CODEBASE
================================================================================
